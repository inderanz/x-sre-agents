name: Provision Infra and Deploy Langflow on GKE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: arctic-moon-463710-t0
  REGION: us-central1
  ZONE: us-central1-a
  CLUSTER_NAME: x-sre-agents-cluster
  NAMESPACE: x-sre-agents

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  terraform:
    name: Provision GKE, CloudSQL, Redis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform-gke
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/228332951437/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions-sa@arctic-moon-463710-t0.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform init

      - name: Import existing node pool if it exists
        run: |
          echo "Checking if node pool already exists..."
          if gcloud container node-pools describe x-sre-agents-cluster-node-pool \
            --cluster=x-sre-agents-cluster \
            --zone=us-central1-a \
            --project=arctic-moon-463710-t0 >/dev/null 2>&1; then
            echo "Node pool exists, importing into Terraform state..."
            terraform import google_container_node_pool.primary_nodes \
              projects/arctic-moon-463710-t0/locations/us-central1-a/clusters/x-sre-agents-cluster/nodePools/x-sre-agents-cluster-node-pool || true
          else
            echo "Node pool does not exist, will be created by Terraform"
          fi

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply tfplan

      - name: Terraform Output (save for next job)
        id: tf_outputs
        run: |
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
          echo "database_connection_name=$(terraform output -raw database_connection_name)" >> $GITHUB_OUTPUT
          echo "redis_host=$(terraform output -raw redis_host)" >> $GITHUB_OUTPUT

    outputs:
      cluster_name: ${{ steps.tf_outputs.outputs.cluster_name }}
      cluster_endpoint: ${{ steps.tf_outputs.outputs.cluster_endpoint }}
      database_connection_name: ${{ steps.tf_outputs.outputs.database_connection_name }}
      redis_host: ${{ steps.tf_outputs.outputs.redis_host }}

  deploy:
    name: Deploy Langflow to GKE
    needs: terraform
    runs-on: ubuntu-latest
    env:
      DATABASE_CONNECTION_NAME: ${{ needs.terraform.outputs.database_connection_name }}
      REDIS_HOST: ${{ needs.terraform.outputs.redis_host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/228332951437/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions-sa@arctic-moon-463710-t0.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "use_application_default_credentials=true" >> $HOME/.config/gcloud/application_default_credentials.json

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ needs.terraform.outputs.cluster_name }} \
            --zone ${{ env.ZONE }} \
            --project ${{ env.PROJECT_ID }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Get CloudSQL Private IP
        run: |
          echo "Getting CloudSQL private IP..."
          CLOUDSQL_PRIVATE_IP=$(gcloud sql instances describe langflow-db-instance --format="json" | jq -r '.ipAddresses[] | select(.type=="PRIVATE").ipAddress')
          echo "CloudSQL Private IP: $CLOUDSQL_PRIVATE_IP"
          echo "CLOUDSQL_PRIVATE_IP=$CLOUDSQL_PRIVATE_IP" >> $GITHUB_ENV

      - name: Deploy Langflow with Local Helm Chart
        run: |
          helm upgrade --install langflow ./langflow/helm \
            --namespace ${{ env.NAMESPACE }} \
            --set image.tag=0.6.10 \
            --set configMap.LANGFLOW_CACHE_TYPE=memory \
            --set configMap.LANGFLOW_DATABASE_URL="postgresql://langflow:langflow-password-123@localhost:5432/langflow" \
            --set configMap.LANGFLOW_REDIS_URL="redis://${{ env.REDIS_HOST }}:6379/1" \
            --set service.type=LoadBalancer \
            --set ingress.enabled=true \
            --set "ingress.hosts[0].host=langflow.x-sre-agents.local" \
            --set "ingress.hosts[0].paths[0].path=/" \
            --set "ingress.hosts[0].paths[0].pathType=Prefix" \
            --set resources.requests.memory=512Mi \
            --set resources.requests.cpu=250m \
            --set resources.limits.memory=1Gi \
            --set resources.limits.cpu=500m \
            --set autoscaling.enabled=true \
            --set autoscaling.minReplicas=1 \
            --set autoscaling.maxReplicas=5 \
            --set autoscaling.targetCPUUtilizationPercentage=80 \
            --set "tolerations[0].key=app" \
            --set "tolerations[0].value=x-sre-agents" \
            --set "tolerations[0].effect=NoSchedule" \
            --set cloudsql.enabled=true \
            --set cloudsql.instanceConnectionName="${{ env.DATABASE_CONNECTION_NAME }}"

      - name: Debug - Check Helm deployment status
        run: |
          echo "=== Helm List ==="
          helm list -n ${{ env.NAMESPACE }}
          echo ""
          echo "=== All Resources in Namespace ==="
          kubectl get all -n ${{ env.NAMESPACE }}
          echo ""
          echo "=== Pods ==="
          kubectl get pods -n ${{ env.NAMESPACE }}
          echo ""
          echo "=== Events ==="
          kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp'

      - name: Wait for Langflow deployment
        run: |
          kubectl rollout status deployment/langflow-langflow-helm -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Wait for LoadBalancer service to get external IP
        run: |
          echo "Waiting for LoadBalancer service to get external IP..."
          # Wait for service to be ready
          kubectl wait --for=condition=Ready service/langflow-langflow-helm -n ${{ env.NAMESPACE }} --timeout=300s
          # Wait for external IP to be assigned
          while [[ $(kubectl get svc -n ${{ env.NAMESPACE }} langflow-langflow-helm -o jsonpath='{.status.loadBalancer.ingress[0].ip}') == "" ]]; do
            echo "Waiting for external IP to be assigned..."
            sleep 10
          done
          echo "Service is ready with external IP!"

      - name: Get Langflow Service External IP
        run: |
          echo "Langflow Service External IP:"
          EXTERNAL_IP=$(kubectl get svc -n ${{ env.NAMESPACE }} langflow-langflow-helm -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [[ -z "$EXTERNAL_IP" ]]; then
            echo "Service not found or no external IP yet. Checking all services:"
            kubectl get svc -n ${{ env.NAMESPACE }}
          else
            echo "$EXTERNAL_IP"
            echo ""
            echo "Port forward command:"
            echo "kubectl port-forward -n ${{ env.NAMESPACE }} svc/langflow-langflow-helm 7680:7680"
          fi

      - name: Show deployment status
        run: |
          echo "=== Pod Status ==="
          kubectl get pods -n ${{ env.NAMESPACE }}
          echo ""
          echo "=== Service Status ==="
          kubectl get svc -n ${{ env.NAMESPACE }}
          echo ""
          echo "=== Ingress Status ==="
          kubectl get ingress -n ${{ env.NAMESPACE }} 